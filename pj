# waitlist_manager.py

"""
Waitlist Manager
This project implements a custom linked list to manage an event waitlist.
Users can add customers to the front (VIPs) or end (general customers),
remove specific customers by name, and print the current waitlist.

Author: Shamseldin Adam
"""

# Node class representing each customer in the waitlist
class Node:
    def __init__(self, name):
        self.name = name
        self.next = None  # Pointer to the next node in the list

# LinkedList class managing the waitlist
class LinkedList:
    def __init__(self):
        self.head = None  # Points to the first customer in the waitlist

    def add_front(self, name):
        """Add a customer to the front of the waitlist."""
        new_node = Node(name)
        new_node.next = self.head
        self.head = new_node
        print(f"{name} added to the front of the waitlist.")

    def add_end(self, name):
        """Add a customer to the end of the waitlist."""
        new_node = Node(name)
        if not self.head:
            self.head = new_node
        else:
            current = self.head
            while current.next:
                current = current.next
            current.next = new_node
        print(f"{name} added to the end of the waitlist.")

    def remove(self, name):
        """Remove a customer from the waitlist by name."""
        current = self.head
        prev = None
        while current:
            if current.name == name:
                if prev:
                    prev.next = current.next
                else:
                    self.head = current.next
                print(f"Removed {name} from the waitlist.")
                return
            prev = current
            current = current.next
        print(f"{name} not found.")

    def print_list(self):
        """Print the current waitlist."""
        if not self.head:
            print("The waitlist is empty.")
        else:
            print("Current waitlist:")
            current = self.head
            while current:
                print(f"- {current.name}")
                current = current.next


# Command-line interface
def waitlist_generator():
    waitlist = LinkedList()

    while True:
        print("\n--- Waitlist Manager ---")
        print("1. Add customer to front")
        print("2. Add customer to end")
        print("3. Remove customer by name")
        print("4. Print waitlist")
        print("5. Exit")

        choice = input("Choose an option (1–5): ")

        if choice == "1":
            name = input("Enter customer name to add to front: ")
            waitlist.add_front(name)
        elif choice == "2":
            name = input("Enter customer name to add to end: ")
            waitlist.add_end(name)
        elif choice == "3":
            name = input("Enter customer name to remove: ")
            waitlist.remove(name)
        elif choice == "4":
            waitlist.print_list()
        elif choice == "5":
            print("Exiting waitlist manager.")
            break
        else:
            print("Invalid choice. Please choose a number from 1–5.")


# Run the waitlist manager if script is executed
if __name__ == "__main__":
    waitlist_generator()
